/*
  This file is bundled by esbuild from src/main.ts.
  Edit the source files instead of dist/main.js.
*/

var y=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var P=Object.prototype.hasOwnProperty;var D=(c,o)=>{for(var e in o)y(c,e,{get:o[e],enumerable:!0})},C=(c,o,e,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let i of b(o))!P.call(c,i)&&i!==e&&y(c,i,{get:()=>o[i],enumerable:!(t=v(o,i))||t.enumerable});return c};var S=c=>C(y({},"__esModule",{value:!0}),c);var T={};D(T,{default:()=>g});module.exports=S(T);var s=require("obsidian"),L=()=>{var o;let c=null;if(typeof require=="function")c=require;else if(typeof window!="undefined"){let e=window.require;typeof e=="function"&&(c=e)}else if(typeof globalThis!="undefined"){let e=globalThis.require;typeof e=="function"&&(c=e)}if(!c)return{fs:null,path:null,os:null};try{let e=c("fs"),t=c("path"),i=c("os");return{fs:(o=e==null?void 0:e.promises)!=null?o:null,path:t!=null?t:null,os:i!=null?i:null}}catch(e){return console.error("Daily Link Clipper could not load Node adapters",e),{fs:null,path:null,os:null}}},f=L(),w={dailyFolder:"Daily",dailyFileDateFormat:"YYYY-MM-DD",clipFolder:"Attachments/Clippings",wishlistBasePath:"Bases/Wishlist.base",readingListBasePath:"Bases/ReadingList.base",openRouterApiKey:"",openRouterKeyPath:"",openRouterModel:"anthropic/claude-3.5-sonnet",fetchTimeoutSeconds:20,modifyDebounceMs:1500,maxCharactersFromPage:2e3,processedLinks:{},classificationFallback:"article"},k=120,x=500,g=class extends s.Plugin{constructor(){super(...arguments);this.settings=w;this.debounceHandles=new Map;this.keyFileErrorNotified=!1;this.keyFileEmptyNotified=!1;this.keyFileUnsupportedNotified=!1}async onload(){await this.loadSettings(),this.addSettingTab(new m(this.app,this)),this.registerEvent(this.app.vault.on("modify",e=>this.onFileModify(e))),this.addCommand({id:"process-todays-daily-links",name:"Process today's daily links",callback:async()=>{let e=this.getTodayDailyFile();e?(await this.processDailyFile(e),new s.Notice("Daily Link Clipper finished processing the current daily note.")):new s.Notice("Daily Link Clipper could not find today's daily note.")}}),this.addCommand({id:"process-all-daily-links",name:"Process all daily links",callback:async()=>{await this.processAllDailyNotes(),new s.Notice("Daily Link Clipper finished processing all daily notes.")}}),await this.processAllDailyNotes()}onunload(){this.debounceHandles.forEach(e=>window.clearTimeout(e)),this.debounceHandles.clear()}async loadSettings(){let e=await this.loadData();this.settings=Object.assign({},w,e!=null?e:{}),this.settings.processedLinks||(this.settings.processedLinks={})}async saveSettings(){await this.saveData(this.settings)}getTodayDailyPath(){let e=`${(0,s.moment)().format(this.settings.dailyFileDateFormat)}.md`;return(0,s.normalizePath)(`${this.settings.dailyFolder}/${e}`)}getTodayDailyFile(){let e=this.getTodayDailyPath(),t=this.app.vault.getAbstractFileByPath(e);return t instanceof s.TFile?t:null}getDailyFolderPath(){return(0,s.normalizePath)(this.settings.dailyFolder||"")}getAllDailyNoteFiles(){let e=this.getDailyFolderPath();if(!e)return[];let t=e.endsWith("/")?e:`${e}/`;return this.app.vault.getFiles().filter(i=>i.extension==="md").filter(i=>{let n=(0,s.normalizePath)(i.path);return n===e||n.startsWith(t)}).sort((i,n)=>i.path.localeCompare(n.path))}async processAllDailyNotes(){let e=this.getAllDailyNoteFiles();for(let t of e)try{await this.processDailyFile(t)}catch(i){console.error("Daily Link Clipper failed while processing daily note",t.path,i)}}getParentFolder(e){if(!e)return"";let t=(0,s.normalizePath)(e),i=t.lastIndexOf("/");return i===-1?"":t.substring(0,i)}getVaultBasePath(){var t;let e=(t=this.app.vault)==null?void 0:t.adapter;return e!=null&&e.getBasePath?e.getBasePath():e!=null&&e.basePath?e.basePath:null}resolveKeyPath(e){if(!e)return null;let t=e.trim();if(!t)return null;let i=f.path,n=f.os;if(t.startsWith("~")){if(!i||!n)return null;t=i.join(n.homedir(),t.slice(1))}if(i&&!i.isAbsolute(t)){let a=this.getVaultBasePath();a&&(t=i.resolve(a,t))}return t}async getOpenRouterApiKey(){var t;if(typeof process!="undefined"&&(process!=null&&process.env)){let i=["OPENROUTER_API_KEY","OPENROUTERKEY"];for(let n of i){let a=process.env[n];if(a!=null&&a.trim())return a.trim()}}let e=(t=this.settings.openRouterKeyPath)==null?void 0:t.trim();if(e){let i=this.resolveKeyPath(e);if(!i)return this.keyFileUnsupportedNotified||(new s.Notice("Daily Link Clipper: key file path is not supported on this platform."),this.keyFileUnsupportedNotified=!0),this.settings.openRouterApiKey.trim();let n=f.fs;if(!n)this.keyFileUnsupportedNotified||(new s.Notice("Daily Link Clipper: key file access is unavailable on this platform."),this.keyFileUnsupportedNotified=!0);else try{let a=(await n.readFile(i,"utf8")).trim();if(a)return a;this.keyFileEmptyNotified||(new s.Notice("Daily Link Clipper: OpenRouter key file is empty."),this.keyFileEmptyNotified=!0)}catch(a){console.error("Daily Link Clipper could not read OpenRouter key file",a),this.keyFileErrorNotified||(new s.Notice("Daily Link Clipper could not read the OpenRouter key file. Check console for details."),this.keyFileErrorNotified=!0)}}return this.settings.openRouterApiKey.trim()}onFileModify(e){if(!(e instanceof s.TFile)||e.extension!=="md")return;let t=this.getTodayDailyPath();if((0,s.normalizePath)(e.path)!==t)return;let i=this.debounceHandles.get(e.path);i&&window.clearTimeout(i);let n=window.setTimeout(async()=>{await this.processDailyFile(e)},this.settings.modifyDebounceMs);this.debounceHandles.set(e.path,n)}async processDailyFile(e){var l,p;let t=await this.app.vault.read(e),i=this.extractLinks(t),n=(l=this.settings.processedLinks)[p=e.path]||(l[p]=[]),a=new Set(n),r=i.filter(u=>!a.has(u));if(r.length)for(let u of r)try{await this.handleLink(u,e),n.push(u),await this.saveSettings()}catch(d){console.error("Daily Link Clipper failed to process link",u,d),new s.Notice(`Failed to process link: ${u}`)}}extractLinks(e){let t=new Set,i=/\[[^\]]*\]\((https?:\/\/[^\s)]+)\)/g,n=/(https?:\/\/[^\s<>()"']+)/g,a;for(;(a=i.exec(e))!==null;)t.add(a[1]);for(;(a=n.exec(e))!==null;)t.add(a[1]);return Array.from(t)}async handleLink(e,t){new s.Notice(`Clipping ${e}`);let i=await this.fetchPage(e),n=this.extractMetadata(e,i),a=await this.classifyLink(n),r=this.buildNoteContent(n,a,t.path);await this.createClippingNote(n,r),new s.Notice(`Saved clip for ${n.title||e}`)}async fetchPage(e){var t;try{let i=await(0,s.requestUrl)({url:e,method:"GET",headers:{"User-Agent":"ObsidianDailyLinkClipper/0.1"}});return{status:i.status,html:(t=i.text)!=null?t:""}}catch(i){return console.error("Daily Link Clipper fetch failed",i),{status:500,html:""}}}extractMetadata(e,t){var n,a;let i={url:e,title:e,description:"",text:"",status:t.status};if(t.html)try{let r=typeof DOMParser!="undefined"?new DOMParser:null,l=r?r.parseFromString(t.html,"text/html"):null;if(l){let p=l.querySelector("title");p!=null&&p.textContent&&(i.title=this.truncate(p.textContent.trim(),k));let u=l.querySelector('meta[name="description"], meta[property="og:description"]'),d=u==null?void 0:u.getAttribute("content");d&&(i.description=this.truncate(d.trim(),x));let h=(a=(n=l.body)==null?void 0:n.innerText)!=null?a:"";if(h){let F=h.replace(/\s+/g," ").trim();i.text=this.truncate(F,this.settings.maxCharactersFromPage)}}}catch(r){console.error("Daily Link Clipper could not parse HTML",r)}return i.title||(i.title=this.truncate(e,k)),i.description||(i.description=""),i.text||(i.text=""),i}async classifyLink(e){var i,n,a,r,l;let t=await this.getOpenRouterApiKey();if(t)try{let p=this.composeClassificationPrompt(e),u=await(0,s.requestUrl)({url:"https://openrouter.ai/api/v1/chat/completions",method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify({model:this.settings.openRouterModel,messages:[{role:"system",content:"Classify the provided webpage as product or article. Respond with just the lowercase label."},{role:"user",content:p}],temperature:0})}),d=JSON.parse((i=u.text)!=null?i:"{}"),h=(l=(r=(a=(n=d==null?void 0:d.choices)==null?void 0:n[0])==null?void 0:a.message)==null?void 0:r.content)==null?void 0:l.trim().toLowerCase();if(h==="product"||h==="article")return h}catch(p){console.error("Daily Link Clipper classification failed",p)}return this.heuristicClassification(e)}composeClassificationPrompt(e){return`${[`URL: ${e.url}`,e.title?`Title: ${e.title}`:"",e.description?`Description: ${e.description}`:"",e.text?`Excerpt: ${e.text.slice(0,400)}`:""].filter(Boolean).join(`
`)}

Respond with either "product" or "article".`}heuristicClassification(e){let t=["product","buy","store","shop","cart","price","sale","purchase","best "," review","buying guide","comparison","vs "," vs.","turntable","speaker","headphone","laptop","phone","tablet","camera","watch","gadget","device","smart home","air purifier","display","monitor","keyboard","mouse","charger","furniture","plush","toy","book ","vinyl","record player","audio","electronics","recommended","top ","must-have","worth buying","deals","$","\u20AC","\xA3"],i=this.tryParseHost(e.url),n=`${e.title} ${e.description}`.toLowerCase();return i&&/amazon|etsy|ebay|aliexpress|ikea|nike|store|shop|bstn|killstar/.test(i)||t.some(a=>n.includes(a))||/\d+\s+(best|top|great|good|recommended)/i.test(n)||this.settings.classificationFallback==="product"?"product":"article"}tryParseHost(e){try{return new URL(e).host.toLowerCase()}catch(t){return null}}formatFrontmatterValue(e){if(e==null)return'""';let t=typeof e!="string"?String(e):e;return t.length?JSON.stringify(t):'""'}truncate(e,t){return!e||!t||e.length<=t?e||"":`${e.slice(0,t-1)}\u2026`}buildNoteContent(e,t,i){let n=(0,s.moment)().format("YYYY-MM-DD HH:mm"),a=t==="product"?"wishlist":"readinglist",r=[];r.push("---"),r.push(`title: ${this.formatFrontmatterValue(e.title||e.url)}`),r.push(`source: ${this.formatFrontmatterValue(e.url)}`),r.push(`captured: ${this.formatFrontmatterValue(n)}`),r.push(`category: ${this.formatFrontmatterValue(t)}`),r.push(`tags: [${a}]`),r.push(`origin: ${this.formatFrontmatterValue(i)}`),r.push("---");let l=(e.title||e.url).replace(/\s+/g," ").trim();return r.push(""),r.push(`# ${l}`),e.description&&(r.push(""),r.push(`> ${e.description}`)),e.text&&(r.push(""),r.push(e.text)),r.push(""),r.push(`Original link: ${e.url}`),r.join(`
`)}sanitizeFileName(e){return e.replace(/[\\/:*?"<>|#]/g," ").replace(/\s+/g," ").trim().slice(0,80)||"clipped-link"}async ensureFolderExists(e){let t=(0,s.normalizePath)(e).split("/"),i=t.shift();if(!i)return;let n=i,a=this.app.vault;for(a.getAbstractFileByPath(n)||await a.createFolder(n);t.length;){let r=t.shift();if(!r)continue;n=`${n}/${r}`,a.getAbstractFileByPath(n)||await a.createFolder(n)}}async createClippingNote(e,t){let i=(0,s.normalizePath)(this.settings.clipFolder);await this.ensureFolderExists(i);let n=this.sanitizeFileName(e.title||e.url),a=0;for(;a<100;){let r=a===0?"":`-${a}`,l=(0,s.normalizePath)(`${i}/${n}${r}.md`),p=this.app.vault.getAbstractFileByPath(l);if(p instanceof s.TFile){try{if((await this.app.vault.read(p)).includes(e.url))return await this.app.vault.modify(p,t),l}catch(u){console.error("Daily Link Clipper could not read existing clip",u)}a+=1;continue}return await this.app.vault.create(l,t),l}throw new Error("Daily Link Clipper could not create a unique clipping note name.")}get pluginSettings(){return this.settings}async recreateBaseFiles(){let e=[{path:this.settings.wishlistBasePath,tag:"wishlist",category:"product",name:"Wishlist"},{path:this.settings.readingListBasePath,tag:"readinglist",category:"article",name:"Reading List"}];for(let t of e){let i=(0,s.normalizePath)(t.path),n=this.getParentFolder(i);n&&await this.ensureFolderExists(n);let a=this.app.vault.getAbstractFileByPath(i);a instanceof s.TFile&&await this.app.vault.delete(a);let r=`filters:
  or:
    - file.hasTag("${t.tag}")
views:
  - type: table
    name: ${t.name}
    order:
      - file.name
      - captured
      - status
`;await this.app.vault.create(i,r)}new s.Notice("Base files recreated successfully.")}async rescanAllLinks(){this.settings.processedLinks={},await this.saveSettings(),await this.processAllDailyNotes(),new s.Notice("Rescan complete. All daily notes have been reprocessed.")}},m=class extends s.PluginSettingTab{constructor(o,e){super(o,e),this.plugin=e}display(){let{containerEl:o}=this;o.empty(),o.createEl("h2",{text:"Daily Link Clipper"}),new s.Setting(o).setName("Daily folder").setDesc("Relative path that holds daily notes.").addText(e=>e.setPlaceholder("Daily").setValue(this.plugin.pluginSettings.dailyFolder).onChange(async t=>{this.plugin.pluginSettings.dailyFolder=t.trim()||"Daily",await this.plugin.saveSettings()})),new s.Setting(o).setName("Daily file date format").setDesc("Moment.js format for the daily file name.").addText(e=>e.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.pluginSettings.dailyFileDateFormat).onChange(async t=>{this.plugin.pluginSettings.dailyFileDateFormat=t.trim()||"YYYY-MM-DD",await this.plugin.saveSettings()})),new s.Setting(o).setName("Clip folder").setDesc("Folder where clipped notes should be stored.").addText(e=>e.setPlaceholder("Attachments/Clippings").setValue(this.plugin.pluginSettings.clipFolder).onChange(async t=>{this.plugin.pluginSettings.clipFolder=t.trim()||"Attachments/Clippings",await this.plugin.saveSettings()})),new s.Setting(o).setName("Wishlist base path").setDesc("File that stores JSON entries for products.").addText(e=>e.setPlaceholder("Bases/Wishlist.base").setValue(this.plugin.pluginSettings.wishlistBasePath).onChange(async t=>{this.plugin.pluginSettings.wishlistBasePath=t.trim()||"Bases/Wishlist.base",await this.plugin.saveSettings()})),new s.Setting(o).setName("Reading list base path").setDesc("File that stores JSON entries for articles.").addText(e=>e.setPlaceholder("Bases/ReadingList.base").setValue(this.plugin.pluginSettings.readingListBasePath).onChange(async t=>{this.plugin.pluginSettings.readingListBasePath=t.trim()||"Bases/ReadingList.base",await this.plugin.saveSettings()})),new s.Setting(o).setName("OpenRouter API key").setDesc("Stored locally. Required for model-based classification. Leave blank to use heuristics.").addText(e=>e.setPlaceholder("sk-or-...").setValue(this.plugin.pluginSettings.openRouterApiKey).onChange(async t=>{this.plugin.pluginSettings.openRouterApiKey=t.trim(),await this.plugin.saveSettings()})),new s.Setting(o).setName("OpenRouter key file path").setDesc("Optional absolute or vault-relative path to a file containing the API key. Tilde (~/) is supported.").addText(e=>e.setPlaceholder("~/secrets/openrouter.key").setValue(this.plugin.pluginSettings.openRouterKeyPath).onChange(async t=>{this.plugin.pluginSettings.openRouterKeyPath=t.trim(),await this.plugin.saveSettings()})),new s.Setting(o).setName("OpenRouter model").setDesc("Model identifier for classification requests.").addText(e=>e.setPlaceholder("anthropic/claude-3.5-sonnet").setValue(this.plugin.pluginSettings.openRouterModel).onChange(async t=>{this.plugin.pluginSettings.openRouterModel=t.trim()||"anthropic/claude-3.5-sonnet",await this.plugin.saveSettings()})),new s.Setting(o).setName("Fetch timeout (seconds)").setDesc("Maximum time to wait when downloading a page or calling OpenRouter.").addSlider(e=>e.setLimits(5,60,1).setValue(this.plugin.pluginSettings.fetchTimeoutSeconds).onChange(async t=>{this.plugin.pluginSettings.fetchTimeoutSeconds=t,await this.plugin.saveSettings()}).setDynamicTooltip()),new s.Setting(o).setName("Modify debounce (ms)").setDesc("Delay after edits before processing the daily note again.").addSlider(e=>e.setLimits(250,5e3,50).setValue(this.plugin.pluginSettings.modifyDebounceMs).onChange(async t=>{this.plugin.pluginSettings.modifyDebounceMs=t,await this.plugin.saveSettings()}).setDynamicTooltip()),new s.Setting(o).setName("Fallback classification").setDesc("Used when OpenRouter is unavailable and heuristics are inconclusive.").addDropdown(e=>e.addOption("article","Article").addOption("product","Product").setValue(this.plugin.pluginSettings.classificationFallback).onChange(async t=>{this.plugin.pluginSettings.classificationFallback=t,await this.plugin.saveSettings()})),o.createEl("h3",{text:"Maintenance"}),new s.Setting(o).setName("Recreate base files").setDesc("Delete and recreate the base files with proper filter structure. All existing entries will be lost.").addButton(e=>e.setButtonText("Recreate base files").setCta().onClick(async()=>{e.setDisabled(!0);try{await this.plugin.recreateBaseFiles()}finally{e.setDisabled(!1)}})),new s.Setting(o).setName("Rescan all links").setDesc("Clear the processed links cache and reprocess all daily notes. Useful after changing classification settings.").addButton(e=>e.setButtonText("Rescan all links").setWarning().onClick(async()=>{e.setDisabled(!0);try{await this.plugin.rescanAllLinks()}finally{e.setDisabled(!1)}}))}};
